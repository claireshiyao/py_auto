5. 请列举出web自动化中你常用的断言（验证）方式
根据页面的URL  driver.current_url
根据页面的标题  assert u"百度一下" in driver.title
根据页面的提示信息
根据某些元素的显示

8. UI自动化测试是否需要做数据库校验？
不需要，按照测试金字塔分层，最上层为UI层，中间层为API接口层，最底层为单元测试层。
我们可以在API接口层去做数据库校验，在UI层我们只需要模拟用户的操作即可。

9. UI自动化测试用例如何设计？
UI自动化测试用例是从手工测试用例中提取出来的
跟手工测试用例相比，自动化测试用例更加注重用例的严谨性
选择用例的时候遵循以下原则：
（1）优先选取覆盖产品核心功能的用例
（2）从成本考量，不要选择流程过于复杂的用例
（3）选取的用例可以是重复执行，繁琐的部分，比如字段验证、提示信息验证
（4）优先实现正向的测试用例，反向用例一般情况复杂、数量多

我的答案：
1. 测试用例将独立的测试对象、测试对象行为以及独立的测试数据进行资源整合，设计正常场景及部分异常场景的用例
2. 测试用例要保证独立性，用例之间没有必然的业务联系，用例与用例之间尽量避免产生依赖
3. 一个用例为一个完整的场景，从用户登录系统到最终退出并关闭浏览器
4. 一个用例只验证一个功能点，不要选择流程太复杂的用例
5. 一条用例完成测试之后需要对测试场景进行还原，以免影响其它用例的执行
6. 测试用例可使用前置、后置，最后使用断言判断用例是否成功

10. 为了提高UI自动化脚本的稳定性，你有做了哪些工作？
（1）尽量用相对路径的xpath表达式
（2）查找元素优先用显示等待
（3）用例与用例之间尽量避免产生依赖，用例可以独立执行
（4）用例执行结束后对测试场景进行还原，避免影响其他用例的执行
（5）脚本执行失败后加入重试机制，提升用例的稳定性
（6）尽量保证单独的测试环境，避免其他的测试同步进行

11. 为了提高UI自动化脚本的可维护性，你有做了哪些工作？
（1）Page Object分层模式，业务和页面元素分离
（2）测试数据和用例分离，单独维护测试数据
（3）页面和用例共性提取
（4）可追溯日志
myanswer:
    1. 通过PO设计模式以及关键字驱动，将元素定位，元素操作，和测试用例进行分离，如果前端元素属性或者测试软件代码发生变化，只需要修改少量的自动化脚本代码。
    2. 快速的错误定位方式：如截图、错误日志等

12. 什么是PO（Page Object）模式？
页面对象模式，对页面进行抽象或者说建模的过程，需要把页面当作一个对象。
把页面的一个个的web元素设计为页面对象的属性，把页面上的操作（如点击、输入等）设计为页面对象的行为。
这样做的好处是业务和实现分开，使自动化测试脚本具备更高的可维护性。
my:
把每个页面当成一个对象，给这些页面写一个类，主要就是完成该页面的元素定位和业务操作；
测试用例脚本与页面对象区分开，用例需要用到哪个页面对象行为，则调用哪个。
PO模式可提高脚本的可维护性，修改时只需要修改少量的代码。

13. 维护了多少条web自动化测试用例？稳定性怎么样？
参考答案
例如：100+case（不要少于100，否则面试官会认为只是在做初级的自动化而已，
应用这套框架，平均每次case的通过率在85%左右，还在持续的优化中。

我的作答
1000多条。
大部分情况下比较稳定，有时网站会出现异常的弹出框，针对具体的情况再优化代码。
有时网络延迟比较严重，再适当增加等待时间。

14. web自动化用例覆盖率如何？
参考答案
例如：80%左右，其中包括主流程场景和核心业务

我的作答
自动化用例覆盖手工用例的70%
1. 首先是针对主体流程进行设计，适合做冒烟测试及回归测试。
2. 其次会针对比较稳定的页面和功能进行自动化用例设计，新的功能更适合手工测试
3. 考虑到脚本开发的成本，有些流程和场景特别复杂的，自动化用例不会覆盖到。

15. ui自动化实现你认为最困难的地方是什么
参考答案
比如：
（1）需求经常变动，脚本维护成本高
（2）特殊元素难以定位
（3）脚本执行不稳定，经常性fail

我的作答
很多内外部因素影响脚本的稳定性，需要多优化脚本来提高稳定性。

16.对于登录验证码如何处理？
参考答案
（1）测试环境中去除验证码
（2）自动识别验证码技术
（3）万能验证码
（4）设置cookie

我的作答
1. 可以让开发设置一个万能验证码，通过输入一个固定的验证码即可完成登录
2. 可以让开发屏蔽对验证码数据正确性的验证，绕过对验证码功能的测试。

17. 失败用例之后如何截图？
参考答案
用例的本质其实就是页面的基础操作。所以封装了basepage。
在basepage当中，对每一个基本操作(如点击、输入等)都进行异常捕获，
当操作失败时，使用driver的save_screenshot函数进行截图操作。

我的作答
如果assert断言失败，则调用截图封装的方法，对页面进行截图。(3分)

18. selenium中如何实现文件上传
参考答案
对于input类型的元素，可以直接通过sendKeys写入文件的路径即可
对于不能写入路径的，可以使用第三方的工具如：AutoIT

我的作答
1. 安装pypiwin32
命令1：pip install pypiwin32
命令2：python -m pip install pypiwin32
2. 导入
import win32gui
import win32con
3. 封装upload函数，只需要填写文件路径参数即可完成文件上传。
4. 必须等待windows上传窗口已经出现，再调用upload函数进行文件上传

19. 在web自动化中，你一般完成什么类型的测试？
参考答案
冒烟测试+回归性测试
回归性测试的部分主要是选取一些业务核心、相对比较稳定、容易实现的场景

我的作答
一般完成主体流程功能的测试，和稳定功能页面的正向用例测试以及部分逆向场景用例测试

20. 请描述下你所设计的Web自动化框架的特点？
参考答案
（1）通过pytest单元测试框架组织/管理测试用例
（2）引入Page Object思想对用例进行分层设计，业务和页面元素分离，
设计：测试用例层+页面对象层+元素定位层+测试数据层
(3)页面元素共性操作提取：basepage封装，实现实时执行日志输出、异常实时捕获、用例失败截图。
对外只提供元素操作，屏蔽掉元素等待和元素查找，简化页面操作逻辑代码。
（4）测试用例中，数据驱动使用
（5）logging日志引入，问题定位/追溯
（6）Allure报表，用例失败后截图
（7）用例失败重试，提高用例稳定性
（8）集成到Jenkins中，每天/每小时构建多次
我的作答
1. 使用PO模式将测试用例与页面对象操作进行分离
2. 使用关键字驱动，封装常用页面对象的操作
3. 测试用例与测试数据分离，使用@pytest.mark.parametrize对用例进行参数化
4. 使用pytest的筛选用例机制可执行特定用例
5. 使用basepage封装，对日志、截图、异常进行封装，优化代码
6. 生成html和allure报告
7.对失败用例可重运行