在测试用例的前面加上：
@pytest.mark.parametrize("参数名",列表数据)
参数名：用来接收每一项数据，并作为测试用例的参数。
列表数据：一组测试数据。

@pytest.mark.parametrize("参数1,参数2",[(数据1，数据2),(数据1，数据2)])
示例:
   @pytest.mark.parametrize("a,b,c",[(1,3,4),(10,35,45),(22.22,22.22,44.44)])
   def test_add(a,b,c):
        res = a + b
        assert res == c



组合参数化：多组参数，依次组合。
使用多个@pytest.mark.parametrize

示例：用例有4个：0,2/0,3/1,2/1,3  迪卡尔积
@pytest.mark.parametrize("x", [0, 1])
@pytest.mark.parametrize("y", [2, 3])
def test_foo(x, y):
    pass


1\参数化
2、各种级别用法，嵌入

pytest插件，安装好了，有的会带来额外的运行参数。
3、重运行机制 - 针对的失败的用例/ 重运行几次？
   Pytest提供了失败重试机制：
    插件名称：rerunfailures
    安装方法：pip install pytest-rerunfailures
    重试方式：用例一旦失败了，马上重运行用例。

    使用方式：
    命令行参数形式：
    命令：pytest --reruns 重试次数
    比如：pytest --reruns 2 表示：运行失败的用例可以重新运行2次。

    命令：pytest --reruns 重试次数 --reruns-delay 次数之间的延时设置(单位：秒)
    Pytest --reruns 2 --reruns-delay 5
    表示失败的用例可以重新运行2次。第一次和第二次的间隔时间为5秒钟。



html的测试报告：
安装：pip install pytest-html

命令：pytest --html=相对路径